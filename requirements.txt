requests

# py -m pip install --upgrade pip setuptools wheel
# py -m pip install -r requirements.txt

### Mac/Linux Command (don't include the #):
# python3 -m pip install --upgrade pip setuptools wheel
# python3 -m pip install --upgrade -r requirements.txt

# When you identify a new package you want to use, 
# Just update the list below and re-run the install command. 

# ======================================================
# VS CODE: Select Interpreter
# ======================================================
# VS Code needs our populated .venv to interpret our files correctly.
# To set the VS Code Interpreter:
# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).
# 2. Search for "Python: Select Interpreter":
# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.
# 4. Choose an Interpreter - A list of available Python environments will appear.
#    Look for the local .venv option.
# 5. Once selected, check the Python version displayed 
#    in the bottom-left corner of the VS Code window in the status bar.

# ======================================================
# ESSENTIAL TOOLS - UNCOMMENT THE NECESSARY ONES BELOW
# ======================================================

# Up-to-date package management tools
pip
setuptools
wheel

# Easy logging for monitoring code execution
loguru

# Environment variables management
python-dotenv

# ======================================================
# TEXT-TO-SPEECH
# ======================================================
# Offline text-to-speech library for Python (1-15 MB)
pyttsx3  

# ======================================================
# JUPYTER (OPTIONAL, NEEDED FOR NOTEBOOKS)
# ======================================================

# Core IPython package that provides an enhanced interactive Python shell (10-15 MB).
ipython

# Core Jupyter functionality required for running notebooks in VS Code (50-60 MB).
jupyter

# Kernel interface for Jupyter notebooks (required for proper kernel registration)
ipykernel

# Interactive widgets (often used in notebooks).
ipywidgets


# ======================================================
# DATA ANALYSIS 
# ======================================================

# Numerical computations and arrays (20-30 MB)
#numpy

# Data manipulation and analysis (built on numpy, 10-20 MB)
#pandas

# ======================================================
# VISUALIZATION
# ======================================================

# Core library for creating visualizations (~30 MB)
matplotlib

# Statistical data visualization library built on matplotlib (~2-5 MB)
seaborn

# Interactive plotting library, often used with Shiny apps (~20-25 MB)
#plotly

# ======================================================
# CONTINUOUS INTELLIGENCE AND INTERACTIVE ANALYTICS
# ======================================================

# Shiny framework for Python applications (~5-10 MB)
#shiny

# ======================================================
# KAFKA STREAMING MESSAGE BROKER INTEGRATION
# ======================================================

# Apache Kafka Python client (~1 MB)
#kafka-python

# ======================================================
# STREAM PROCESSING - CAN BE VERY LARGE
# ======================================================

# Streaming data processing framework (~200-250 MB)
#pyspark<4.0.0

# ======================================================
# MACHINE LEARNING (ML)
# ======================================================

# Core ML library with flexible APIs (~40-50 MB)
#scikit-learn

# ======================================================
# NATURAL LANGUAGE PROCESSING (NLP) - CAN BE VERY LARGE
# ======================================================

# NLP library for text processing (~10 MB core library; downloading corpora can add ~1 GB).
#nltk

# SpaCy: A powerful NLP library ~50 MB (core library; language models + ~300 MB or more per model).
#spacy